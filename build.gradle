buildscript {
  ext {
    postgresqlVertsion = "42.2.14"
    JooqVertxVersion = "6.3.0"
    kotlinVersion = "1.5.10"
    vertxVersion = "4.1.0"
    log4jVersion = "2.13.3"
    junitJupiterVersion = "5.6.0"
    igniteVersion = "2.9.1"
  }
  repositories {
    mavenLocal()
    mavenCentral()
  }
  dependencies {
//    classpath "org.start2do:codegen:1.0-SNAPSHOT"
    classpath "org.postgresql:postgresql:$postgresqlVertsion"
    classpath "io.github.jklingsporn:vertx-jooq-generate:$JooqVertxVersion"
    classpath "io.vertx:vertx-codegen:$vertxVersion"
  }
}

plugins {
  id "com.diffplug.gradle.spotless" version "4.5.1" apply false
  id "org.jetbrains.kotlin.jvm" version "1.5.10" apply false
  id 'com.github.johnrengelman.shadow' version '6.1.0' apply(false)
  id "java"
  id 'application'
  id "org.jetbrains.kotlin.kapt" version "1.5.10" apply false
  id "io.franzbecker.gradle-lombok" version "4.0.0" apply(false)
}

group = "org.start2do"
version = "1.0-SNAPSHOT"


allprojects {
  apply {
    plugin "org.jetbrains.kotlin.jvm"
    plugin "org.gradle.java"
    plugin "org.gradle.application"
    plugin 'kotlin-kapt'
    plugin "com.diffplug.gradle.spotless"
    plugin "io.franzbecker.gradle-lombok"
  }
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    jcenter()
  }
  test {
    useJUnitPlatform()
  }
  spotless {
//    ratchetFrom 'origin/master'
    java {
      importOrder()
      removeUnusedImports()
      googleJavaFormat()
      licenseHeader '/*  大道至简 (C)$YEAR */'
    }
    kotlin {
      ktlint('0.37.2').userData('indent_size': '2', 'continuation_indent_size': '2', 'disabled_rules': 'no-wildcard-imports')
      licenseHeader '/*  大道至简 (C)$YEAR */'
    }
  }


}

subprojects {


  dependencies {
    //测试包
    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"
    //自定义工具包
    compile "org.start2do:utils:0.0.1-SNAPSHOT"
    //Jackson
    compileOnly "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.10.2"
    //集群
    compileOnly group: 'org.apache.ignite', name: 'ignite-log4j2', version: '2.9.0'
    compileOnly("org.apache.ignite:ignite-core:$igniteVersion")
    compileOnly("org.apache.ignite:ignite-log4j:$igniteVersion")
    compileOnly "org.apache.ignite:ignite-indexing:$igniteVersion"
    compileOnly("io.vertx:vertx-ignite:$vertxVersion") {
      exclude group: "org.apache.ignite"
    }
    compileOnly "com.fasterxml.jackson.core:jackson-databind:2.11.3"

    compileOnly("io.vertx:vertx-zookeeper:$vertxVersion") {
      exclude group: "org.slf4j"
      exclude group: "log4j"
    }
  }
  def env = System.getProperty("env") ?: "dev"
  println "当前打包环境为:$env"
  sourceSets {
    main {
      resources {
        srcDirs "src/main/profile/${env}"
      }
    }
  }
  def out_path = "./"
  if (file("/Volumes/RamDisk/Caches").exists()) {
    out_path = "/Volumes/RamDisk/Caches/db"
  }
  apply {
    plugin "com.github.johnrengelman.shadow"
  }
  ext {
    set("out_path", out_path)
    set("vertxVersion", vertxVersion)
    set("junitJupiterVersion", junitJupiterVersion)
    set("kotlinVersion", kotlinVersion)
  }
  compileKotlin {
    kotlinOptions {
      jvmTarget = "11"
    }
  }
  compileTestKotlin {
    kotlinOptions {
      jvmTarget = "11"
    }
  }

}

//设置输出目录
def out_path = "${project.properties["out_path"]}$group"


sourceSets {
  main {
    output.resourcesDir = file(out_path)
    java.outputDir = file(out_path)
  }
}
compileKotlin {
  destinationDir = file(out_path)
}

task mavenInstall {
  dependsOn ":vertx-core-api:install"
  dependsOn ":vertx-core:install"
  dependsOn ":vertx-db:install"
  dependsOn ":vertx-web:install"
  dependsOn ":codeGen:install"
}
